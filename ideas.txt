# assigning
foo <- "Hello World"

# pipeline (use of the pl keyword? Or just p? Is p used to execute? Should we maybe use the word run?)
a -> b -> c

# Create a sub pipeline and assign it to sub
sub <- (d -> e -> f)

# Execute a subpipeline
sub <- !(d -> e -> f)  # execute between () and assign result to sub

# running a pipeline with a sub pipeline
a -> b -> c -> sub

# branching
a -> [left: b -> c | right: d -> e] -> merge

# Can I also do a classic call?
foo(x, b, c)

# function definition ([] makes it more consistent with the branching?)
fn b(x) -> [left, right] {
    if x >= 10 then x -> left
    else x -> right
}

# data types
n <- 1, 2, 3, 4, 5, 6,  # Alternative: [1, 2, 3, 4, 5]
n <- 10

# math, 10 10 is "sending" arguments s - arguments are seperated by space in a pipeline
10 10 -> + -> print  # 20
10 3 -> * -> !(10 10 -> +)  # This looks stupid? Maybe I just don't need to reinvent the wheel and just support the "old style" (or maybe also?)
sum <- !(15 + 10 * 3)

"foo" -> upper -> print

# Currying? {} seems not like a good choice?
fn +(a, b) -> [next] {
    return a + b
}

10 -> {a: 10 +} -> print

# Alternative?
fn split(msg, by <- "\n") -> [next, error] {  # is there always an error pipeline?
    ...
}

# how would filter work?
fn filter(x) -> [next] {  # next is always the next step if there is no branching?
    if x < 0 then stop -> next  # stop as a keyword to stop the pipeline? How does the pipeline know it was stopped?

    if x % 2 == 0 then x -> next
}

fn filter(x) {
    if x % 2 == 0 then x -> # -> is sending out? Or should "next" be a special variable, always supported with explicit declaration?
}

fn f(x) {
    if x % 2 == 0 then x -> forward
}

1, 2, 3, 4, 5, 6, 7 -> filter -> print # 2, 4, 6
1, 2, 3, 4, 5, 6, 7 -> filter -> fanout print # 2 4 6 , fanout keyword? To spread instead of having a list?
